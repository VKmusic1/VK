import os
import threading
import requests
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)
from dotenv import load_dotenv

load_dotenv()

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ ---
app = Flask("")

@app.route("/")
def home():
    return "Bot is running"

def run_flask():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# --- Telegram-–±–æ—Ç ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")

async def search_vk_music(query: str):
    url = "https://api.vk.com/method/audio.search"
    params = {
        "q": query,
        "access_token": os.getenv("VK_TOKEN"),
        "v": "5.131"
    }
    response = requests.get(url, params=params).json()
    return response.get('response', {}).get('items', [])[:5]

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    tracks = await search_vk_music(query)
    
    if not tracks:
        await update.message.reply_text("üö´ –¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    keyboard = []
    for track in tracks:
        title = f"{track['artist']} - {track['title']}"
        callback_data = f"download_{track['url']}"
        keyboard.append([InlineKeyboardButton(title, callback_data=callback_data)])
    
    await update.message.reply_text(
        "üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def download_track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    url = query.data.split('_', 1)[1]
    
    await query.edit_message_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫...")
    await context.bot.send_audio(
        chat_id=query.message.chat_id,
        audio=url,
        title="–¢—Ä–µ–∫ –∏–∑ VK"
    )

async def main():
    # –£–¥–∞–ª—è–µ–º webhook, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await app_bot.bot.delete_webhook()
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await app_bot.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask).start()

    # –°–æ–∑–¥–∞—ë–º Telegram-–±–æ—Ç–∞
    app_bot = Application.builder().token(os.environ['BOT_TOKEN']).build()

    app_bot.add_handler(CommandHandler("start", start))
    app_bot.add_handler(CallbackQueryHandler(download_track, pattern="^download_"))
    app_bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    import asyncio
    asyncio.run(main())
